#include <iostream>
#include <string>
#include <stack>
#include <list>
using namespace std;


int main() {

	list <string> lst;
	list <string> saved;

	string xml_file = " " <users>			<user> <id>1</id>  <name> Ahmed Ali </name>    <posts>      <post>        <body>        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.     </body>        <topics>        <topic>        economy        </topic>        <topic>        finance        </topic>        </topics>        </post>        <post>        <body>    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </body>        <topics>        <topic>        solar_energy        </topic>        </topics>        </post>        </posts>        <followers>        <follower>        <id>2</id>        </follower>        <follower>        <id>3</id>        </follower>        </followers>        </user>        <user>        <id>2</id>        <name>Yasser Ahmed</name>        <posts>        <post>        <body>       Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.     </body>        <topics>        <topic>        education        </topic>        </topics>        </post>        </posts>        <followers>        <follower>        <id>1 </id>        </follower>        </followers>        </user>        <user>        <id>3 </id>        <name>Mohamed Sherif</name>        <posts>        <post>        <body>         Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.      </body>        <topics>        <topic>        sports        </topic>        </topics>        </post>        </posts>        <followers>        <follower>        <id>1</id>        </follower>        </followers>        </user>        </users>";
	for (int i = 0; i < xml_file.length(); i++)
	{
		string start = "";
		string value = "";

		if (xml_file[i] == '<')
		{
			switch (xml_file[i + 1]) {
			case'!':
				continue;
				break;
			case'?':
				continue;
				break;

			default: // push into the stack 
			{
				//for tag
				for (i = i + 1; xml_file[i] != '>'; i++)
				{
					start = start + xml_file[i];
				}
				lst.push_back(start);

				//for value
				int k;
				for (k = i + 1; xml_file[k] != '<' && k < xml_file.length(); k++) //loop till the opening tag
				{  //not value
				if (xml_file[k] == ' ' && xml_file[k - 1] == ' ' || xml_file[k] == ' ' && xml_file[k - 1] == '>' || xml_file[k] == '<' && xml_file[k - 1] == ' ' || xml_file[k] == '\n' || xml_file[k] == '\t' || xml_file[k] == ' ' && xml_file[k - 1] == '\n' || xml_file[k] == ' ' && xml_file[k - 1] == '\t') continue;
				else value = value + xml_file[k]; // a value
				}
				if (value != "") lst.push_back(value);

			}
			} // switch brackit		
		}
		else continue; // if not "<" 
	}







	// now we have a list of the tags and values 




	auto ptr = lst.begin(); // head of the lst
	stack <string> cls_square_b ;

	// we turn from lst to saved
	for (; ptr != lst.end();) {
		string s = *ptr;  // data of the node

		//in case of opening tag ,, and here there is 2 cases add value or add group brackit
		if (s[0] != '/' && s[0] != '  ' && s[0] != '{' && s[0] != '}' && s[0] != ',' && s[0] != '[' && s[0] != ']') { 

			if (next(ptr, 1) != lst.end() && next(ptr, 2) != lst.end()) { //check there is next and after next
				
				// to avoid repeaating names
				if (ptr == lst.begin()) saved.push_back(*ptr);
				if (ptr != lst.begin() && '/' +  * ptr != *prev(ptr , 1 ) ) saved.push_back(*ptr);


				//value
				string two_next = *next(ptr, 2); // check that it doesn't exceed the list
				if ('/' + s == two_next) {       // one line xml tags
					saved.push_back(*next(ptr)); // push the value
					ptr = next(ptr, 2); // increase ptr with 2 ptr  = ptr + 2 to skip the value node 
					continue;
				}

				//group brackit
				if ('/' + s != two_next) {  // group opening tag
					saved.push_back("{");	//lst.emplace(next(ptr), 1, '{');
					ptr++;
					continue;
				}
			}
		}


		//in case of closing tag
		if (s[0] == '/') { 

			// }
			string two_prev = *prev(ptr, 2);
			if (s != '/' + two_prev) saved.push_back("}"); //not one line, so group closing tag 
			

			// , 
			if (next(ptr) != lst.end()) //not exceed the length
			{
				string next_node = *next(ptr, 1); // check what's after me

				//in case of name add <<<<< , >>>>>> 
				if (next_node[0] != '/' && next_node[0] != '}' && next_node[0] != ',') saved.push_back(",");



				// name as my name 
				if (*ptr == '/' + next_node) { 

					cls_square_b.push(*ptr); // push for the ] brackit


					// for opening brackit [ :
					auto srch = saved.end();
					srch--;

					for (; srch != saved.begin();) {
						if ('/' + *srch != *ptr) {
							srch--;
							continue;
						}
						if(* next(srch,1) != "[" ) {
						saved.emplace(next(srch), 1, '[');
						}
						
						break;
					}
					if ('/' + *srch == *ptr && srch == saved.begin()) saved.emplace(next(srch), 1, '[');
				}

				// for closing brackit ] :
				
				if ( !cls_square_b.empty() && *ptr == cls_square_b.top() && *ptr != '/' + next_node) {

					saved.push_back("]");
					cls_square_b.pop(); 

				}

			} // not exceeding the length
			else { // so we now point at last elemnt in the list, so we need to check if it has ]
				if (!cls_square_b.empty() && *ptr == cls_square_b.top()) { //we won't check if it doesn't equal its next because it has no next, it's the last one
					saved.push_back("]");
					cls_square_b.pop();
				}
			}
		
			ptr++;
		}
	}



// for printing in a json format
	cout << '{' << '\n' << "  ";
	string last_space = "  "; 
	auto pt = saved.begin();
	for (pt = saved.begin(); pt != saved.end(); pt++) {
		//name or value
		if (*pt != "{" && *pt != "}" && *pt != "[" && *pt != "]" && *pt != ",") {
			
			if ( pt == saved.begin()) cout << "\"" << *pt << "\"" << ":"  << " " ; //tag name 
			else if (*next(pt , 1 ) != "]" && * next(pt, 1) != "}" && *next(pt, 1) != ","  ) cout << "\"" << *pt << "\"" << ":" << " "; //tag name
			else {
				try { // number					
				cout <<  stoi(*pt) ;  // value 
				}
				catch (invalid_argument e) {
				cout << "\"" << *pt << "\"";  // value 
				}
			}

		}
		if (*pt == "{" ||  *pt == "[" ) {
			last_space += "  ";
			cout << *pt << '\n' << last_space ; 
		}

		if (*pt == ",") {
			cout << *pt << '\n' << last_space;
		}

		if (*pt == "}" || *pt == "]") {
			last_space.erase( last_space.length() - 2 ) ;
			cout << '\n' << last_space << *pt ;
		}

	}
	cout << '\n' << '}' ;


}
