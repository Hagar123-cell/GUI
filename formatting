#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;
void format(string xml_file) {
    int indent = 0;
    string out_str = "";
    queue<string> q;
    bool prev_tag_open = false;  // false = closing tag, true = opening tag
    for (int i = 0; i < xml_file.length(); i++)
    {
        string opening_tag = "";
        string closing_tag = "";
        string data = "";
        if (xml_file[i] == '<')
        {
            switch (xml_file[i + 1])
            {
            case'!':
                int j;
                for (j = i; xml_file[j] != '>'; j++)
                {
                    closing_tag = closing_tag + xml_file[j];
                }
                closing_tag += '>';
                q.push(closing_tag);
                q.push("\n");
                i = j;
                break;
            case'?':
                for (j = i; xml_file[j] != '>'; j++)
                {
                    closing_tag = closing_tag + xml_file[j];
                }
                closing_tag += '>';
                q.push(closing_tag);
                q.push("\n");
                i = j;
                break;
            case'/':
            {
                for (j = i; xml_file[j] != '>'; j++)
                {
                    closing_tag = closing_tag + xml_file[j];
                }
                closing_tag += '>';
                if (prev_tag_open) {
                    q.push("\n");
                    for (int m = 0; m < indent; m++) {
                        q.push("    ");
                    }
                }
                else {
                    q.push("\n");
                    indent--;
                    for (int m = 0; m < indent; m++) {
                        q.push("    ");
                    }
                }
                q.push(closing_tag);
                prev_tag_open = false;
                i = j;
                break;
            }
            default:
            {
                int k;
                for (k = i; xml_file[k] != '>'; k++)
                {
                    opening_tag = opening_tag + xml_file[k];
                }
                opening_tag += '>';
                if (prev_tag_open) {
                    q.push("\n");
                    indent++;
                    for (int m = 0; m < indent; m++) {
                        q.push("    ");
                    }
                }
                else {
                    if (indent != 0)
                        q.push("\n");
                    for (int m = 0; m < indent; m++) {
                        q.push("    ");
                    }
                }
                q.push(opening_tag);
                
                int d;
                for (d = k + 1; xml_file[d] != '<'; d++)
                {
                    data = data + xml_file[d];
                }
                
                bool allwhitespace = true;
                for (int b = 0; b < data.length(); b++) {
                    if (!isspace(data[b])) {
                        allwhitespace = false;
                        break;
                    }
                }
                if (!allwhitespace) {
                    q.push("\n");
                    for (int m = 0; m < indent; m++) {
                        q.push("    ");
                    }
                    q.push(data);
                }

                prev_tag_open = true;
                i = d - 1;
                break;
            }
            }
            continue;
        }
        else
            continue;
    }
    int size = q.size();
    for (int i = 0; i < size; i++) {
        if (!q.empty()) {
            out_str += q.front();
            q.pop();
        }
    }
    cout << out_str;
}
