#include <iostream>
#include <fstream>
#include <string>
#include <stack>
#include <list>



using namespace std;



int main()
{
   // write the file 
     //then check the start and push elements into the stack 
    


       // <<<<<<<<<<<<<<<<<<<<< pushing elements into the stack >>>>>>>>>>>> 
    string xml_file = "<bookstore> <book> <year> 2005 </year> </book> <book> <year> 2005 </year> <id> 4 </id> </book> </bookstore> ";

    list <string> lst;

    for (int i = 0; i < xml_file.length(); i++)
    {
        string start = "";
        string value = "";
        //cout << xml_file[i];

        if (xml_file[i] == '<')
        {
            switch (xml_file[i + 1]) {
            case'!':
                continue;
                break;
            case'?':
                continue;
                break;

            default: // push into the stack 
            {
                int k;
                for (k = i + 1; xml_file[k] != '>'; k++)
                {
                    start = start + xml_file[k];
                }

                lst.push_back(start);
                //s.push(start);

                for (k = k + 1; xml_file[k] != '<' && k < xml_file.length(); k++)
                {
                    if (xml_file[k] == ' ') continue;
                    else
                    {
                        value = value + xml_file[k];
                    }
                }
                if (value == "") break;
                else lst.push_back(value) ; //s.push(value);
            }
            }
        }
        else continue;
    }




    //   // <<<<<<<<<<<<<<<<<<<<< pushing elements into the stack >>>>>>>>>>>> 
    //string xml_file = "<bookstore> <book> <year> 2005 </year> </book> <book> <year> 2005 </year> <id> 4 </id> </book> </bookstore> ";  
    //    
    //stack <string> s;

    //for (int i = 0; i < xml_file.length(); i++)
    //{
    //    string start = "";
    //    string value = "";
    //    //cout << xml_file[i];

    //    if (xml_file[i] == '<')
    //    {
    //        switch (xml_file[i + 1]) {
    //            case'!':
    //                continue;
    //                break;
    //            case'?':
    //                continue;
    //                break;

    //            default: // push into the stack 
    //            {
    //                int k;
    //                for (k = i + 1; xml_file[k] != '>'; k++)
    //                {
    //                    start = start + xml_file[k];
    //                }
    //                s.push(start);

    //                for (k = k + 1; xml_file[k] != '<' && k < xml_file.length() ; k++)
    //                {
    //                    if (xml_file[k] == ' ') continue;
    //                    else
    //                    { 
    //                        value = value + xml_file[k];
    //                    }
    //                }
    //                if (value == "") break;
    //                else s.push(value);
    //            }
    //        }
    //    }
    //    else continue;   
    //}





















}




//for (int i = 0; i < xml_file.length(); i++)
//{
//    string start = "";
//    string value = "";
//    string end = "";

//    if (xml_file[i] == '<')
//    {
//        switch (xml_file[i + 1])
//        {
//            case'!':
//                continue;
//                break;
//            case'?':
//                 continue;
//                 break;
//            case'/': // push 
//            {
//                for (int j = i + 2; xml_file[j] != '>'; j++)
//                {
//                  end = end + xml_file[j];
//                }
//                if (s.top() == end)
//                    {
//                    s.pop();
//                }
//                else if (s.top() != end)
//                {
//                    cout << "ERROR! the closing tag " << end << " Not Matching the opening tag " << s.top() << endl;
//                    cout << "sloving errors" << endl;
//                    while (s.top() != end)
//                    {
//                        string right_closing_tag = "";
//                        right_closing_tag = "</" + s.top() + ">";
//                        xml_file.insert(xml_file.find(end) - 2, right_closing_tag);
//                        s.pop();
//                    }

//                    return false;
//                    break;
//                }
//                break;
//            }
//            default: // push into the stack 
//            {
//                int k;
//                for (k = i + 1; xml_file[k] != '>'; k++)
//                {
//                    start = start + xml_file[k];
//                }
//                s.push(start);

//                for (k = k + 1; xml_file[k] != '<' &&  k < xml_file.length() ; k++)
//                {
//                    if (xml_file[k] == ' ') continue;
//                    value = value + xml_file[k];
//                }
//                s.push(value);

//                break;
//            }
//        }

//        continue;
//    }
//    else 
//         continue;
//}







//
//    ifstream file;
//    file.open("E:/ASU/DS/project/sample.xml");
//
//
//    string data;
//    if (file.is_open()) { // file can be opened 
//    	while (file.good()) { //while we didn't reach the end of the file
//
//    		getline(file, data,'\n');
//    		cout << data << '\n';	
//
//    	}
//    	
//}
//}

